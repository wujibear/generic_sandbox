#!/usr/bin/env ruby

require 'csv'

class CsvScrambler
  FILE = "names.csv"
  #indexes = [0, 1,2,3,etc]
  #map {0: name, 2: name}

  def initial_csv
    @initial_csv ||= CSV.read(FILE)
  end

  def name_positions
    @name_positions ||= initial_csv[1].each_with_object({}).with_index do |(name, obj), i|
      obj[i] = name
    end
  end

  def scramble
    used_indexes = []
    result = name_positions.each_with_object({}) do |(index, name), obj|
      available_indexes = replacement_indexes(index) - used_indexes
      random_index = available_indexes.sample
      obj[random_index] = name
      used_indexes << random_index
    end
    p [:scrambled, result]

    result.sort.to_h.values
  end

  private

  def replacement_indexes(index)
    last_index = initial_csv[1].size - 1

    if index == 0
      ( 1..last_index ).to_a
    elsif index == last_index
      ( 0..last_index - 1 ).to_a
    else
      ( 0..index - 1 ).to_a + ( index + 1..last_index ).to_a
    end
  end

end
# so we lock in the original order of indexes. hashmap?
# migrated arr tracks which have been moved, adding to it as we go
# a separate new list is generated by straight switching indexes as we iterate except the current index

p [:prepping]
cs = CsvScrambler.new
p [:csv, cs.initial_csv]
p [:name_positions, cs.name_positions]
p [:scramble, cs.scramble]
